%pure-parser
%locations
%defines
%define parse.lac full
%error-verbose
%parse-param {driver_t *driver}
%lex-param {void *scanner}

%{

#define YYDEBUG 1

#include <stdio.h>
#include <string.h>
#include <math.h>

#include <MOM/driver.hpp>
#include <MOM/parser.hpp>

  const int debug_parser=0;
  
  int tokenizer_lex(YYSTYPE *lvalp,YYLTYPE *llocp,void *scanner);
#define parser_lex tokenizer_lex

  void parser_error(YYLTYPE *locp,driver_t *driver,const char *err)
  {
      CRASH("exception at line %d columns [%d-%d] %s",locp->first_line,locp->first_column,locp->last_column,err);
  }

#define scanner driver->scanner
  %}

 //union used to catch all symbols
%union
{
    double double_numb;
    int int_numb;
    std::string *text;
}

%token TK_INVALID_STRING
%token TK_INVALID_CHAR
//arithmethc
%token <double_numb> TK_DOUBLE
%type <double_numb> double_numb
%token <int_numb> TK_INT
%token <int_numb> TK_QUANTITY
%type <int_numb> int_numb
%left TK_MINUS TK_PLUS
%left TK_TIMES TK_DIV
%precedence NEG
%right TK_POW

//geometry
%token TK_L
%token TK_T

//text
%token <text> TK_QUOTED_TEXT
%type <text> text

%%

commands:
        | commands command
        | command
;

command: geometry
;

geometry: TK_L '=' int_numb {driver->L=$3;}
        | TK_T '=' int_numb {driver->T=$3;}
;

//////////////////////////////////////////////////// ARITHMETIC //////////////////////////////////////////////////////

//text
text: TK_QUOTED_TEXT {$$=$1;}
| text '+' text {$$=new std::string(*$1);(*$$)+=(*$3);delete $1;delete $3;}
;

//double
double_numb: TK_DOUBLE {$$=$1;}
         | int_numb {$$=$1;}
         | TK_PLUS double_numb %prec NEG {$$=$2;}
         | TK_MINUS double_numb %prec NEG {$$=-$2;}
         | double_numb TK_PLUS double_numb {$$=$1+$3;}
         | double_numb TK_MINUS double_numb {$$=$1-$3;}
         | double_numb TK_TIMES double_numb {$$=$1*$3;}
         | double_numb TK_DIV double_numb {$$=$1/$3;}
         | double_numb TK_POW double_numb {$$=pow($1,$3);}
         | '(' double_numb ')' {$$=$2;}
;

//integer
int_numb: TK_INT {$$=$1;}
        | TK_PLUS int_numb %prec NEG {$$=$2;}
        | TK_MINUS int_numb %prec NEG {$$=-$2;}
        | int_numb TK_PLUS int_numb {$$=$1+$3;}
        | int_numb TK_MINUS int_numb {$$=$1-$3;}
        | int_numb TK_QUANTITY {$$=$1*$2;}
        | int_numb TK_TIMES int_numb {$$=$1*$3;}
        | int_numb TK_DIV int_numb {$$=$1/$3;}
        | int_numb TK_POW int_numb {$$=(int)pow($1,$3);}
        | '(' int_numb ')' {$$=$2;}
;

